name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - '[0-9]+.x'
    tags:
      - '*'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  ci:
    name: Node ${{ matrix.node_version }} - On ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        id: setup-node
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 16.x
          cache: 'npm'

      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Deps
        run: npm ci
          

      - name: Lint
        run: |
          npm run lint
          npm run format:check

      - name: Test
        run: |
          npm run test:ci
      # - name: build
      #   run: |
      #     npm run build
      #     npm run post-build

      # - name: Compress action step
      #   uses: a7ul/tar-action@v1.1.0
      #   id: compress
      #   with:
      #     command: c
      #     files: ./dist 
      #     outPath: dist.tar.gz
      # - name: Set outputs
      #   id: tags
      #   run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      # - name: Create annotation for build error
      #   run: echo "${{ steps.tags.outputs.sha_short }}"
      # - name: release
      #   uses: actions/create-release@v1
      #   id: create_release
      #   with:
      #     draft: false
      #     prerelease: false
      #     release_name: ${{ steps.version.outputs.version }}
      #     tag_name: ${{ steps.tags.outputs.sha_short }}
      #     # body_path: CHANGELOG.md
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: upload linux artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: dist.tar.gz
      #     asset_name: dist.tar.gz
      #     asset_content_type: application/gzip

      # - name: 'Upload Artifact'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: website
      #     path: dist/
      #     retention-days: 5
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "ghcr.io/${{ github.actor }}/node-boilerplate"
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v6
        id : push
        with:
          context: .
          file: build/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: "ghcr.io/node-boilerplate"
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true


  # infrastructure:
  #   name: create infra using terraform
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  #     TF_VAR_PUB_KEY: ${{secrets.PUB_KEY}}
    
  #   outputs:
  #     ip: ${{steps.ip_address.outputs.ip}}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
       
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v1
      
  #     - name: Terraform Init
  #       run:  terraform  -chdir=terraform init
        
  #     - name: Run Terrascan
  #       id: terrascan
  #       uses: tenable/terrascan-action@main
  #       with:
  #         iac_type: 'terraform'
  #         iac_version: 'v14'
  #         policy_type: 'aws'
  #         only_warn: true
     
      
  #     - name: Terraform Apply
  #       run: terraform -chdir=terraform apply --auto-approve 
  #     - name : get address
  #       id : ip_address
  #       run : |
  #         terraform-bin -chdir=terraform output  -raw ec2_ip   >> ip.txt

  #         echo "ip=$(cat ip.txt)" >> "$GITHUB_OUTPUT"
  #     - name : test
  #       run: | 
  #         echo ${{steps.ip.outputs.ip}}
  #         echo  ${{ needs.infrastructure.outputs.ip }}   
      
  # deploy :
  #   name : deploy to production server 
  #   needs : [ infrastructure , ci ]  
  #   runs-on:  ubuntu-latest 
    
    
  #   steps : 
  #     - name: 'download Artifact'
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: website
  #         path: dist/
      

  #     - name: copy file via ssh key
  #       uses: appleboy/scp-action@v0.1.7
  #       with:
  #         host:  ${{needs.infrastructure.outputs.ip}}
  #         username: ec2-user
  #         port: 22
  #         key: ${{ secrets.PRI_KEY }}
  #         source: "dist/"
  #         target: "~/app"
  #     - name: executing remote ssh commands using password
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ needs.infrastructure.outputs.ip }}
  #         username: ec2-user
  #         key: ${{ secrets.PRI_KEY}}
  #         port: 22
  #         script: |
  #           sudo yum install -y nodejs
  #           sudo npm install pm2@latest -g
  #           sudo pm2 startup
  #           cd app/dist/
  #           npm install 
  #           sudo PORT=80 pm2 start "node main.js" 
             